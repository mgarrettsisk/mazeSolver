For pixel resolution:

Total width / Pixel Width = Number of pixels

500 / 10 = 50

0
10
20
30
40


Int x * pixel width = top right corner of rectangle

0 * 10 = 


Prim's Randomized

Three data structures:

(Class) Graph
	Cell <class>
		xCoord <int>
		yCoord <int>
		Cell Above <Cell>		NOTE: if a cell is at an edge of the graph, the value will be 'null'
		Cell Below <Cell>
		Cell Left <Cell>
		Cell Right <Cell>
		Visit Count <int>
	Vertices <List<Cell>>
		
	

Prim's Algorithm

Choose a random cell on the first column and move to path list
For all adjacent cells, add to walls list.


NOTE: to replicate the way in which the maze is to be visualized, change the way the grid is displayed. Have two layers.
One major layer that would be 50x50, however, inside each cell would be a subset, maybe 5x5 pixels, or some other such
arrangement. In any case, the trick for visualization lies on how the canvas grid is drawn and how the cells themselves
are chosen.

There may be a need to break up each pixel into four configurations, depending upon how the path drawing is done.




This algorithm is a randomized version of Prim's algorithm.

    Start with a grid full of walls.
    Pick a cell, mark it as part of the maze. Add the walls of the cell to the wall list.
    While there are walls in the list:
        Pick a random wall from the list. If only one of the two cells that the wall divides is visited, then:
            Make the wall a passage and mark the unvisited cell as part of the maze.
            Add the neighboring walls of the cell to the wall list.
        Remove the wall from the list.

Note that simply running classical Prim's on a graph with random edge weights would create mazes stylistically identical
to Kruskal's, because they are both minimal spanning tree algorithms. Instead, this algorithm introduces stylistic
variation because the edges closer to the starting point have a lower effective weight.

		